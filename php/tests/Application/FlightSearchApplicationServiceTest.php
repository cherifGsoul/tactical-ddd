<?php
declare(strict_types=1);

namespace Cherif\FlightSearch\Test\Application;

use Cherif\FlightSearch\Adapter\DomainModel\InMemoryServedRoutesService;
use Cherif\FlightSearch\Application\Command\FlightSearchCriteriaCommand;
use Cherif\FlightSearch\Application\Exception\DateError;
use Cherif\FlightSearch\Application\Exception\PassengerSeatsError;
use Cherif\FlightSearch\Application\Exception\RouteError;
use Cherif\FlightSearch\Application\FlightSearchService;
use Cherif\FlightSearch\Application\Model\FlightSearchCriteria;
use Cherif\FlightSearch\DomainModel\CabinClass;
use Cherif\FlightSearch\DomainModel\FlightType;
use DateTimeImmutable;
use DateTimeZone;
use PHPUnit\Framework\TestCase;

class FlightSearchApplicationServiceTest extends TestCase
{
    private FlightSearchService $flightSearchService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $servedRoutesService = new InMemoryServedRoutesService();
        $servedRoutesService->between('ALG', 'CDG');
        $this->flightSearchService = new FlightSearchService($servedRoutesService);
    }

    function test_it_should_not_build_criteria_for_not_served_routes()
    {
        $this->expectException(RouteError::class);
        $criteria = FlightSearchCriteriaCommand::from(
            'ALG',
            'JFK',
            new DateTimeImmutable('+2 day', new DateTimeZone('Africa/Algiers')),
            CabinClass::ECONOMIC()->getValue(),
            FlightType::ONE_WAY()->getValue()
        );
        $this->flightSearchService->match($criteria);
    }

    function test_it_should_not_build_criteria_when_departure_date_is_in_the_past()
    {
        $this->expectException(DateError::class);
        $date = ( new DateTimeImmutable('-1 day', new DateTimeZone('Africa/Algiers')))->setTime(0, 0);
        $command = FlightSearchCriteriaCommand::from(
            'ALG',
            'CDG',
            $date,
            CabinClass::ECONOMIC()->getValue(),
            FlightType::ONE_WAY()->getValue()
        );
        $command = $command->withAdults(1);
        $this->flightSearchService->match($command);
    }

    function test_it_should_have_at_least_one_adult_seat()
    {
        $this->expectException(PassengerSeatsError::class);
        $date = (new DateTimeImmutable('+2 day', new DateTimeZone('Africa/Algiers')))->setTime(0, 0);
        $command = FlightSearchCriteriaCommand::from(
            'ALG',
            'CDG',
            $date,
            CabinClass::ECONOMIC()->getValue(),
            FlightType::ONE_WAY()->getValue()
        );
        $this->flightSearchService->match($command);
    }

    function test_it_should_have_max_nine_adults_seats()
    {
        $this->expectException(PassengerSeatsError::class);
        $date = (new DateTimeImmutable('+2 day', new DateTimeZone('Africa/Algiers')))->setTime(0, 0);
        $command = FlightSearchCriteriaCommand::from(
            'ALG',
            'CDG',
            $date,
            CabinClass::ECONOMIC()->getValue(),
            FlightType::ONE_WAY()->getValue()
        );
        $command = $command->withAdults(10);
        $this->flightSearchService->match($command);
    }

    function test_it_should_have_max_nine_seats_split_between_children_and_adults()
    {
        $this->expectException(PassengerSeatsError::class);
        $date = (new DateTimeImmutable('+2 day', new DateTimeZone('Africa/Algiers')))->setTime(0, 0);
        $command = FlightSearchCriteriaCommand::from(
            'ALG',
            'CDG',
            $date,
            CabinClass::ECONOMIC()->getValue(),
            FlightType::ONE_WAY()->getValue()
        );
        $command = $command->withAdults(5);
        $command = $command->withChildren(5);
        $this->flightSearchService->match($command);
    }

    function test_it_should_return_search_criteria_instance()
    {
        $date = (new DateTimeImmutable('+2 day', new DateTimeZone('Africa/Algiers')))->setTime(0, 0);
        $command = FlightSearchCriteriaCommand::from(
            'ALG',
            'CDG',
            $date,
            CabinClass::ECONOMIC()->getValue(),
            FlightType::ONE_WAY()->getValue()
        );
        $command = $command->withAdults(2);
        $criteria = $this->flightSearchService->match($command);
        self::assertInstanceOf(FlightSearchCriteria::class, $criteria);
    }

    function test_it_should_return_search_criteria_instance_for_round_trip()
    {
        $date = (new DateTimeImmutable('+2 day', new DateTimeZone('Africa/Algiers')))->setTime(0, 0);
        $returnDate = (new DateTimeImmutable('+5 day', new DateTimeZone('Africa/Algiers')))->setTime(0, 0);
        $command = FlightSearchCriteriaCommand::from(
            'ALG',
            'CDG',
            $date,
            CabinClass::ECONOMIC()->getValue(),
            FlightType::ROUND_TRIP()->getValue(),
            $returnDate
        );
        $command = $command->withAdults(2);
        $command = $command->withInfant(2);
        $criteria = $this->flightSearchService->match($command);
        self::assertInstanceOf(FlightSearchCriteria::class, $criteria);
    }
}